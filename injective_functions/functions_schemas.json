{
  "functions": [
    {
      "name": "send_bid_auction",
      "description": "Sends a bid to the burn auction on behalf of the address",
      "parameters": {
        "type": "object",
        "properties": {
          "round": {
            "type": "integer",
            "description": "This specifies the round of the burn auction to participate in"
          },
          "amount": {
            "type": "string",
            "description": "This specifies the amount to bid"
          }
        },
        "required": [
          "round",
          "amount"
        ]
      }
    },
    {
      "name": "grant_address_auth",
      "description": "Grants an address permission to broadcast messages to the chain on behalf of the granter",
      "parameters": {
        "type": "object",
        "properties": {
          "grantee_address": {
            "type": "string",
            "description": "The address who is given privileges to execute messages on behalf of the address"
          },
          "msg_type": {
            "type": "string",
            "description": "The injective chain message the grantee has been given permission to execute"
          },
          "duration": {
            "type": "integer",
            "description": "Time in seconds for the authz permission to expire"
          }
        },
        "required": [
          "grantee_address",
          "msg_type",
          "duration"
        ]
      }
    },
    {
      "name": "revoke_address_auth",
      "description": "Revokes an authorized address's permission to execute messages on behalf of the granter",
      "parameters": {
        "type": "object",
        "properties": {
          "grantee_address": {
            "type": "string",
            "description": "The address whose privileges to execute messages are being revoked"
          },
          "msg_type": {
            "type": "string",
            "description": "The injective chain message type to revoke permission for"
          }
        },
        "required": [
          "grantee_address",
          "msg_type"
        ]
      }
    },
    {
      "name": "fetch_grants",
      "description": "Fetch authorization grants between a granter and grantee for a specific message type",
      "parameters": {
        "type": "object",
        "properties": {
          "granter": {
            "type": "string",
            "description": "The address that granted the authorization"
          },
          "grantee": {
            "type": "string",
            "description": "The address that received the authorization"
          },
          "msg_type": {
            "type": "string",
            "description": "The message type URL to query grants for"
          }
        },
        "required": [
          "granter",
          "grantee",
          "msg_type"
        ]
      }
    },
    {
      "name": "query_balances",
      "description": "Query the balance of tokens for the current address",
      "parameters": {
        "type": "object",
        "properties": {
          "denom_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of token denominations to query (e.g., ['INJ', 'USDT']). If empty, returns all balances"
          }
        },
        "required": []
      }
    },
    {
      "name": "transfer_funds",
      "description": "Transfer funds from current address to another Injective address",
      "parameters": {
        "type": "object",
        "properties": {
          "to_address": {
            "type": "string",
            "description": "Recipient's Injective address"
          },
          "amount": {
            "type": "string",
            "description": "Amount to transfer (as Decimal string to preserve precision)"
          },
          "denom": {
            "type": "string",
            "description": "Token denomination (e.g., 'INJ', 'USDT')"
          }
        },
        "required": [
          "to_address",
          "amount",
          "denom"
        ]
      }
    },
    {
      "name": "query_spendable_balances",
      "description": "Query the spendable balance of tokens for the current address",
      "parameters": {
        "type": "object",
        "properties": {
          "denom_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of token denominations to query (e.g., ['INJ', 'USDT']). If empty, returns all spendable balances"
          }
        },
        "required": []
      }
    },
    {
      "name": "query_total_supply",
      "description": "Query the total supply of tokens on the network",
      "parameters": {
        "type": "object",
        "properties": {
          "denom_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of token denominations to query (e.g., ['INJ', 'USDT']). If empty, returns total supply for all tokens"
          }
        },
        "required": []
      }
    },
    {
      "name": "place_derivative_limit_order",
      "description": "Place a limit order in a derivatives market",
      "parameters": {
        "type": "object",
        "properties": {
          "price": {
            "type": "string",
            "description": "Limit price for the order"
          },
          "quantity": {
            "type": "string",
            "description": "Order quantity"
          },
          "side": {
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "description": "Order side"
          },
          "market_id": {
            "type": "string",
            "description": "Derivatives market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index for the order"
          }
        },
        "required": [
          "price",
          "quantity",
          "side",
          "market_id",
          "subaccount_idx"
        ]
      }
    },
    {
      "name": "place_derivative_market_order",
      "description": "Place a market order in a derivatives market",
      "parameters": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "string",
            "description": "Order quantity"
          },
          "side": {
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "description": "Order side"
          },
          "market_id": {
            "type": "string",
            "description": "Derivatives market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index for the order"
          }
        },
        "required": [
          "quantity",
          "side",
          "market_id",
          "subaccount_idx"
        ]
      }
    },
    {
      "name": "cancel_derivative_limit_order",
      "description": "Cancel an existing derivative limit order",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Derivatives market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index of the order"
          },
          "order_hash": {
            "type": "string",
            "description": "Hash of the order to cancel"
          }
        },
        "required": [
          "market_id",
          "subaccount_idx",
          "order_hash"
        ]
      }
    },
    {
      "name": "place_spot_limit_order",
      "description": "Place a limit order in a spot market",
      "parameters": {
        "type": "object",
        "properties": {
          "price": {
            "type": "string",
            "description": "Limit price for the order"
          },
          "quantity": {
            "type": "string",
            "description": "Order quantity"
          },
          "side": {
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "description": "Order side"
          },
          "market_id": {
            "type": "string",
            "description": "Spot market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index for the order"
          }
        },
        "required": [
          "price",
          "quantity",
          "side",
          "market_id",
          "subaccount_idx"
        ]
      }
    },
    {
      "name": "place_spot_market_order",
      "description": "Place a market order in a spot market",
      "parameters": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "string",
            "description": "Order quantity"
          },
          "side": {
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "description": "Order side"
          },
          "market_id": {
            "type": "string",
            "description": "Spot market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index for the order"
          }
        },
        "required": [
          "quantity",
          "side",
          "market_id",
          "subaccount_idx"
        ]
      }
    },
    {
      "name": "cancel_spot_limit_order",
      "description": "Cancel an existing spot limit order",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Spot market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index of the order"
          },
          "order_hash": {
            "type": "string",
            "description": "Hash of the order to cancel"
          }
        },
        "required": [
          "market_id",
          "subaccount_idx",
          "order_hash"
        ]
      }
    },
    {
      "name": "get_subaccount_deposits",
      "description": "Get deposits for a specific subaccount",
      "parameters": {
        "type": "object",
        "properties": {
          "subaccount_idx": {
            "type": "integer",
            "description": "Index of the subaccount"
          },
          "denoms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of token denominations to query"
          }
        },
        "required": [
          "subaccount_idx"
        ]
      }
    },
    {
      "name": "get_aggregate_market_volumes",
      "description": "Get aggregate trading volumes for specified markets",
      "parameters": {
        "type": "object",
        "properties": {
          "market_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of market IDs to query"
          }
        },
        "required": [
          "market_ids"
        ]
      }
    },
    {
      "name": "get_aggregate_account_volumes",
      "description": "Get aggregate trading volumes for specific accounts in specific markets",
      "parameters": {
        "type": "object",
        "properties": {
          "market_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of market IDs"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of account addresses"
          }
        },
        "required": [
          "market_ids",
          "addresses"
        ]
      }
    },
    {
      "name": "get_subaccount_orders",
      "description": "Get orders for a specific subaccount in a market",
      "parameters": {
        "type": "object",
        "properties": {
          "subaccount_idx": {
            "type": "integer",
            "description": "Index of the subaccount"
          },
          "market_id": {
            "type": "string",
            "description": "Market ID to query orders from"
          }
        },
        "required": [
          "subaccount_idx",
          "market_id"
        ]
      }
    },
    {
      "name": "get_historical_orders",
      "description": "Get historical trade records for a market",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Market ID to query historical trades"
          }
        },
        "required": [
          "market_id"
        ]
      }
    },
    {
      "name": "get_mid_price_and_tob_derivatives_market",
      "description": "Get mid price and top of book for a derivatives market",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Derivatives market ID"
          }
        },
        "required": [
          "market_id"
        ]
      }
    },
    {
      "name": "get_mid_price_and_tob_spot_market",
      "description": "Get mid price and top of book for a spot market",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Spot market ID"
          }
        },
        "required": [
          "market_id"
        ]
      }
    },
    {
      "name": "get_derivatives_orderbook",
      "description": "Get orderbook for a derivatives market",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Derivatives market ID"
          },
          "limit": {
            "type": "integer",
            "description": "Limit the number of orders returned"
          }
        },
        "required": [
          "market_id"
        ]
      }
    },
    {
      "name": "trader_derivative_orders",
      "description": "Get trader's derivative orders in a market",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Derivatives market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index"
          }
        },
        "required": [
          "market_id",
          "subaccount_idx"
        ]
      }
    },
    {
      "name": "trader_spot_orders",
      "description": "Get trader's spot orders in a market",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Spot market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index"
          }
        },
        "required": [
          "market_id",
          "subaccount_idx"
        ]
      }
    },
    {
      "name": "trader_derivative_orders_by_hash",
      "description": "Get trader's derivative orders by their hashes",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Derivatives market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index"
          },
          "order_hashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of order hashes to query"
          }
        },
        "required": [
          "market_id",
          "subaccount_idx",
          "order_hashes"
        ]
      }
    },
    {
      "name": "trader_spot_orders_by_hash",
      "description": "Get trader's spot orders by their hashes",
      "parameters": {
        "type": "object",
        "properties": {
          "market_id": {
            "type": "string",
            "description": "Spot market ID"
          },
          "subaccount_idx": {
            "type": "integer",
            "description": "Subaccount index"
          },
          "order_hashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of order hashes to query"
          }
        },
        "required": [
          "market_id",
          "subaccount_idx",
          "order_hashes"
        ]
      }
    },
    {
      "name": "launch_instant_spot_market",
      "description": "Launch a new spot market",
      "parameters": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string",
            "description": "Market ticker symbol"
          },
          "base": {
            "type": "string",
            "description": "Base denomination"
          },
          "quote": {
            "type": "string",
            "description": "Quote denomination"
          },
          "min_price_tick": {
            "type": "string",
            "description": "Minimum price tick size"
          },
          "min_quantity_tick": {
            "type": "string",
            "description": "Minimum quantity tick size"
          },
          "min_notional": {
            "type": "string",
            "description": "Minimum notional value"
          }
        },
        "required": [
          "ticker",
          "base",
          "quote",
          "min_price_tick",
          "min_quantity_tick",
          "min_notional"
        ]
      }
    },
    {
      "name": "launch_instant_perp_market",
      "description": "Launch a new perpetual futures market",
      "parameters": {
        "type": "object",
        "properties": {
          "ticker": {
            "type": "string",
            "description": "Market ticker symbol"
          },
          "quote_denom": {
            "type": "string",
            "description": "Quote denomination"
          },
          "oracle_base": {
            "type": "string",
            "description": "Oracle base asset"
          },
          "oracle_quote": {
            "type": "string",
            "description": "Oracle quote asset"
          },
          "oracle_scale_factor": {
            "type": "integer",
            "description": "Oracle price scale factor"
          },
          "oracle_type": {
            "type": "string",
            "description": "Type of oracle to use"
          },
          "maker_fee_rate": {
            "type": "string",
            "description": "Maker fee rate"
          },
          "taker_fee_rate": {
            "type": "string",
            "description": "Taker fee rate"
          },
          "initial_margin_ratio": {
            "type": "string",
            "description": "Initial margin ratio"
          },
          "maintenance_margin_ratio": {
            "type": "string",
            "description": "Maintenance margin ratio"
          },
          "min_price_tick": {
            "type": "string",
            "description": "Minimum price tick size"
          },
          "min_quantity_tick": {
            "type": "string",
            "description": "Minimum quantity tick size"
          },
          "min_notional_size": {
            "type": "string",
            "description": "Minimum notional size"
          }
        },
        "required": [
          "ticker",
          "quote_denom",
          "oracle_base",
          "oracle_quote",
          "oracle_scale_factor",
          "oracle_type",
          "maker_fee_rate",
          "taker_fee_rate",
          "initial_margin_ratio",
          "maintenance_margin_ratio",
          "min_price_tick",
          "min_quantity_tick",
          "min_notional_size"
        ]
      }
    },
    {
      "name": "opt_out_trade_earn_rewards",
      "description": "Opt out from trade and earn rewards program",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    },
    {
      "name": "stake_tokens",
      "description": "Stake tokens with a validator",
      "parameters": {
        "type": "object",
        "properties": {
          "validator_address": {
            "type": "string",
            "description": "Validator address to stake with"
          },
          "amount": {
            "type": "number",
            "description": "Amount to stake"
          }
        },
        "required": [
          "validator_address",
          "amount"
        ]
      }
    },
    {
      "name": "create_denom",
      "description": "Create a new token denomination",
      "parameters": {
        "type": "object",
        "properties": {
          "subdenom": {
            "type": "string",
            "description": "Sub-denomination of the token"
          },
          "name": {
            "type": "string",
            "description": "Full name of the token"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol"
          },
          "decimals": {
            "type": "integer",
            "description": "Number of decimal places for the token"
          }
        },
        "required": [
          "subdenom",
          "name",
          "symbol",
          "decimals"
        ]
      }
    },
    {
      "name": "mint",
      "description": "Mint new tokens of an existing denomination",
      "parameters": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "Token denomination to mint"
          },
          "amount": {
            "type": "integer",
            "description": "Amount of tokens to mint"
          }
        },
        "required": [
          "denom",
          "amount"
        ]
      }
    },
    {
      "name": "burn",
      "description": "Burn existing tokens of a denomination",
      "parameters": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "Token denomination to burn"
          },
          "amount": {
            "type": "integer",
            "description": "Amount of tokens to burn"
          }
        },
        "required": [
          "denom",
          "amount"
        ]
      }
    },
    {
      "name": "set_denom_metadata",
      "description": "Set or update metadata for a token denomination",
      "parameters": {
        "type": "object",
        "properties": {
          "sender": {
            "type": "string",
            "description": "Address of the sender"
          },
          "description": {
            "type": "string",
            "description": "Description of the token"
          },
          "denom": {
            "type": "string",
            "description": "Token denomination"
          },
          "subdenom": {
            "type": "string",
            "description": "Sub-denomination of the token"
          },
          "token_decimals": {
            "type": "integer",
            "description": "Number of decimal places for the token"
          },
          "name": {
            "type": "string",
            "description": "Name of the token"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol"
          },
          "uri": {
            "type": "string",
            "description": "URI for additional token metadata"
          },
          "uri_hash": {
            "type": "string",
            "description": "Hash of the URI content"
          }
        },
        "required": [
          "sender",
          "description",
          "denom",
          "subdenom",
          "token_decimals",
          "name",
          "symbol",
          "uri",
          "uri_hash"
        ]
      }
    }
  ]
}